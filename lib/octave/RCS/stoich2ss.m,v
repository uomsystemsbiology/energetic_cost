head	1.5;
access;
symbols;
locks; strict;
comment	@// @;


1.5
date	2015.07.02.23.40.08;	author peterg;	state Exp;
branches;
next	1.4;

1.4
date	2014.11.25.23.09.36;	author peterg;	state Exp;
branches;
next	1.3;

1.3
date	2014.11.24.02.59.26;	author peterg;	state Exp;
branches;
next	1.2;

1.2
date	2014.10.06.00.36.08;	author peterg;	state Exp;
branches;
next	1.1;

1.1
date	2014.09.30.23.30.07;	author peterg;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Deprecated message.
@
text
@function [X_ss V_ss x_ss] = stoich2ss (Nf,Nr,kappa,K,Nef,Ner,Ke,X_0,L_xX,L_Xx,G_X)
  ## usage: [X_ss V_ss] = stoich2ss (Nf,Nr,kappa,K,Nef,Ner,Ke,X_0,L_xX,L_Xx,G_X)
  ## 
  ## 

  warning("stoich2ss is deprecated - please use stoich_sim with t=0 instead");
  x_e = ones(size(Ke));
 
  global STOICH2SS	 

  STOICH2SS.kappa = kappa;
  STOICH2SS.NNf = [Nf;Nef];
  STOICH2SS.NNr = [Nr;Ner];
  STOICH2SS.KK = [K;Ke];
  STOICH2SS.N = Nr-Nf;
  STOICH2SS.x_e = x_e;
  STOICH2SS.X_0 = X_0;		# State
  STOICH2SS.L_xX = L_xX;
  STOICH2SS.L_Xx = L_Xx;
  STOICH2SS.G_X = G_X;

  ## Start vector - reduced order
  x_0 = L_xX*X_0
  x_ss = fsolve("stoich2ss_fun",x_0);

  ## Regenerate state vector
  X_ss = L_Xx*x_ss + G_X*X_0;

  # Compute ss flows.
  [dx,V_ss] =  stoich2ss_fun (x_ss);

endfunction
@


1.4
log
@output x_sss as well.
@
text
@d6 1
@


1.3
log
@New version with reduced-order steady-state.
@
text
@d1 1
a1 1
function [X_ss V_ss] = stoich2ss (Nf,Nr,kappa,K,Nef,Ner,Ke,X_0,L_xX,L_Xx,G_X)
@


1.2
log
@Numerical version.
@
text
@d1 2
a2 2
function [x_ss v_ss] = stoich2ss (Nf,Nr,kappa,K,Nef,Ner,Ke,x_e)
  ## usage: [x_ss v_ss] = stoich2ss (Nf,Nr,kappa,K,Nef,Ner,Ke,x_e)
d6 2
a7 4
  if nargin<8
    x_e = ones(size(Ke))
  endif

d16 11
a26 3
  
  x_ss = fsolve("stoich2ss_fun",[2;3;4]);
  [dx,v_ss] =  stoich2ss_fun (x_ss)
d28 2
a29 6
  ## kNK = diag(kappa)*N'*diag(K);
  ## NkNK = N*kNK
  ## kN_e = diag(kappa)*N_e';
  ## NkN_e = N*kN_e;
  ## x_ss = -(NkNK\NkN_e*Kx_e);
  ## v_ss = -kNK*x_ss - kN_e*Kx_e	
@


1.1
log
@Initial revision
@
text
@d1 2
a2 3
function [x_ss v_ss] = stoich2ss (N,kappa,K,N_e,Kx_e)
	 
  ## usage: [x_ss v_ss] = stoich2ss (N,kappa,K,N_e,Kx_e)
d5 23
a27 6
  kNK = diag(kappa)*N'*diag(K);
  NkNK = N*kNK
  kN_e = diag(kappa)*N_e';
  NkN_e = N*kN_e;
  x_ss = -(NkNK\NkN_e*Kx_e);
  v_ss = -kNK*x_ss - kN_e*Kx_e	 
@
