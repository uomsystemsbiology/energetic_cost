head	1.16;
access;
symbols;
locks; strict;
comment	@// @;


1.16
date	2015.10.21.04.33.29;	author peterg;	state Exp;
branches;
next	1.15;

1.15
date	2015.10.21.03.27.13;	author peterg;	state Exp;
branches;
next	1.14;

1.14
date	2015.10.21.00.49.51;	author peterg;	state Exp;
branches;
next	1.13;

1.13
date	2015.10.21.00.43.17;	author peterg;	state Exp;
branches;
next	1.12;

1.12
date	2015.10.21.00.39.39;	author peterg;	state Exp;
branches;
next	1.11;

1.11
date	2015.10.05.03.48.42;	author peterg;	state Exp;
branches;
next	1.10;

1.10
date	2015.10.01.01.05.40;	author peterg;	state Exp;
branches;
next	1.9;

1.9
date	2015.09.30.05.21.32;	author peterg;	state Exp;
branches;
next	1.8;

1.8
date	2015.09.30.05.12.47;	author peterg;	state Exp;
branches;
next	1.7;

1.7
date	2015.03.10.04.54.20;	author peterg;	state Exp;
branches;
next	1.6;

1.6
date	2015.01.08.05.47.16;	author peterg;	state Exp;
branches;
next	1.5;

1.5
date	2014.12.23.22.56.08;	author peterg;	state Exp;
branches;
next	1.4;

1.4
date	2014.12.23.04.10.01;	author peterg;	state Exp;
branches;
next	1.3;

1.3
date	2014.12.23.04.03.28;	author peterg;	state Exp;
branches;
next	1.2;

1.2
date	2014.12.23.03.39.23;	author peterg;	state Exp;
branches;
next	1.1;

1.1
date	2014.12.23.02.03.30;	author peterg;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Legacy stuff.
@
text
@function M = stoich2stoich (m, i_fix, j_fix)
	 
  ## usage: M = stoich2stoich (m)
  ## 
  ## 

  if nargin<2
     i_fix = [];
  endif

  if nargin<3
     j_fix = [];
  endif

  ## if nargin<4
  ##    j_zero = [];
  ## endif


  ## Copy
  M = m;
	 
  ## Extract info
  N = m.N;			# Stoichiometric matrix
  r = rank(N);			# Rank
  [n_X,n_V] = size(N);		# Sizes
  M.N = N;

  ## Extract I matrices for chemostat
  I_X = I_cs = I_cd = eye(n_X);
  for i=1:n_X
    if ismember(i,i_fix)
      I_cd(i,i) = 0;
    else
      I_cs(i,i) = 0;
    endif
  endfor
  M.I_cd = I_cd;
  M.I_cs = I_cs;

  ## Extract I matrices for flowstat
  I_V = I_fs = I_fd = eye(n_V);
  for i=1:n_V
    if ismember(i,j_fix)
      I_fd(i,i) = 0;
    else
      I_fs(i,i) = 0;
    endif
  endfor
  M.I_fd = I_fd;
  M.I_fs = I_fs;

  ## Set i_fix rows to zero
  N_cd = I_cd*N;

  ## Set j_fix cols to zero
  N_d = N_cd*I_fd;

  n_fix = length(i_fix);
  ## [n_X,n_V] = size(N);
  ## N(i_fix,:) = zeros(n_fix,n_V);

  ## Set up matrices: chemostat
  N_s = N-N_d;			# Static part
  M.N_d = N_d;
  M.N_s = N_s;

  ## Set up matrices: flowstat
  

  ## Null space stuff
  [G,K] = stoich2null(N_d);
  M.G = G;
  M.K = K;

  ## Range space stuff
  [RR i_x]  = rref (N_d');	# Reduced row echelon form
  n_x = length(i_x);		# Number of reduced-order states

  ## Transformations 
  
  ## Transform x to X
  M.L = M.L_Xx = L_Xx = RR'(:,1:n_x);
  
  ## Transform X to x
  T = eye(n_X);
  M.L_xX = L_xX = T(i_x,:);
  
  ## Transform X to x_d
  I_d = setdiff(1:(n_X),i_x);
  M.L_dX = L_dX = T(I_d,:);
  
  ## For reconstructing X from x
  M.G_X = G_X = L_dX'*G;
  G_X_alt = eye(n_X)-L_Xx*L_xX;	# Alternative computation
  check_norm(G_X-G_X_alt,"G_X");

  ## Chemostat versions: chemostat
   M.G_X_cs = G_X(:,i_fix);
   M.G_X_d = G_X;
   M.G_X_d(i_fix,:) = zeros(n_fix,n_X);

  ## Some dimensions
  [M.n_X M.n_V] = size(N);
  M.n_x = n_x;

  ## Indices of x
  M.i_x = i_x;

  ## Indices of conserved moieties 
  [n_G m_G] = size(G);
  for i=1:n_G
      i_cm{i} = find(G(i,:)!=0);
  endfor
  M.i_cm = i_cm;

endfunction
@


1.15
log
@Tidy.
@
text
@d98 4
a101 4
  ## ## Chemostat versions: chemostat
  ##  M.G_X_cs = G_X(:,i_fix);
  ##  M.G_X_d = G_X;
  ##  M.G_X_d(i_fix,:) = zeros(n_fix,n_X);
@


1.14
log
@Extra check on G_X
@
text
@d38 2
d50 2
d54 1
a54 1
  N_ds = I_cd*N;
d57 1
a57 1
  N_d = N_ds*I_fd;
@


1.13
log
@Use i_x from rref
@
text
@d91 2
d94 4
a97 4
  ## Chemostat versions: chemostat
   M.G_X_cs = G_X(:,i_fix);
   M.G_X_d = G_X;
   M.G_X_d(i_fix,:) = zeros(n_fix,n_X);
@


1.12
log
@Reorganise to use I_cs etc
Generate some indices.
@
text
@d73 3
a75 3
  [RR I_x]  = rref (N_d');	# Reduced row echelon form
  n_x = length(I_x);		# Number of reduced-order states
  
d83 1
a83 1
  M.L_xX = L_xX = T(I_x,:);
d86 1
a86 1
  I_d = setdiff(1:(n_X),I_x);
a101 1
  i_x = (L_xX*[1:n_X]')';
@


1.11
log
@*** empty log message ***
@
text
@d1 1
a1 1
function M = stoich2stoich (m, i_fix, j_fix, j_zero)
d15 3
a17 3
  if nargin<4
     j_zero = [];
  endif
d29 20
a48 4
  ## Delete j_zero columns
  j_nz = setdiff([1:n_V], j_zero);
  N = N_zero = N(:,j_nz);
  
d50 5
d56 2
a57 2
  [n_X,n_V] = size(N);
  N(i_fix,:) = zeros(n_fix,n_V);
d60 1
a60 2
  N_d = N;			# Dynamic part
  N_cs = N_zero-N;			# Static part
d62 1
a62 1
  M.N_cs = N_cs;
a66 1
  ## N is now N_d
d68 1
a68 1
  [G,K] = stoich2null(N);
d71 1
a71 1
  
d73 1
a73 1
  [RR I_x]  = rref (N');	# Reduced row echelon form
d100 11
@


1.10
log
@Flowstat/j_fix/j_zero stuff.
@
text
@d11 1
a11 1
  if nargin<2
d15 1
a15 1
  if nargin<3
d38 1
a38 1
  ## Set up matrices.
d40 1
a40 1
  N_s = N_zero-N;			# Static part
d42 1
a42 1
  M.N_s = N_s;
d44 2
d73 2
a74 2
  ## Chemostat versions
   M.G_X_s = G_X(:,i_fix);
@


1.9
log
@G_X_s & G_X_d
@
text
@d1 1
a1 1
function M = stoich2stoich (m, i_fix)
d11 9
d29 5
a33 1
  ## Zap i_fix rows
d37 2
d40 1
a40 1
  N_s = m.N-N;			# Static part
d43 2
a44 1
 
@


1.8
log
@include i_fix stuff
@
text
@d53 6
a58 1
  M.G_X = G_X = L_dX'*G;			
@


1.7
log
@Nore dimewnsuons
@
text
@d1 1
a1 1
function M = stoich2stoich (m)
d7 4
d19 11
a29 1
  
d56 1
a56 1
  [M.n_X M.N_V] = size(N);
@


1.6
log
@Copy data initiallly
@
text
@d40 5
a44 1
  
@


1.5
log
@Generate M.L (=L_Xx)
@
text
@d6 3
@


1.4
log
@Tidy
@
text
@d25 1
a25 1
  M.L_Xx = L_Xx = RR'(:,1:n_x);
@


1.3
log
@Works for ABCA
@
text
@d3 35
a37 43
## usage: M = stoich2stoich (m)
## 
## 

## Extract info
N = m.N;			# Stoichiometric matrix
r = rank(N);			# Rank
[n_X,n_V] = size(N);		# Sizes
M.N = N;

## Null space stuff
[G,K] = stoich2null(N);
M.G = G;
M.K = K;

## Range space stuff
[RR I_z]  = rref (N');		# Reduced row echelon form
n_x = length(I_z);		# Number of reduced-order states

M.L_Xx = L_Xx = RR'(:,1:n_x);

## L_xX = zeros(n_x,n_X);
## for i = 1:n_x
##     for j = 1:n_X
## 	if (I_z(i) == j)
## 	   L_xX(i,j) = 1;
## 	endif
##     endfor
## endfor

## Transformations 
T = eye(n_X);
L_xX = T(I_z,:);
I_d = setdiff(1:(n_X),I_z)
L_dX = T(I_d,:);

M.L_xX = L_xX;
M.L_dX = L_dX;

## For reconstructing X from x
G_X = L_dX'*G;			
M.G_X = G_X;

@


1.2
log
@Works for L_xX and L_Xx
@
text
@d19 2
a20 2
[RR II]  = rref (N');		# Reduced row echelon form
n_x = length(II);		# Number of reduced-order states
d24 15
a38 8
L_xX = zeros(n_x,n_X);
for i = 1:n_x
    for j = 1:n_X
	if (II(i) == j)
	   L_xX(i,j) = 1;
	endif
    endfor
endfor
d40 5
@


1.1
log
@Initial revision
@
text
@d10 1
d19 2
a20 3
[RR II]  = rref (N);		# Reduced row echelon form
M.L_Xx = RR(II,:)';
M.L_xX = RR(:,II)';
d22 11
@
