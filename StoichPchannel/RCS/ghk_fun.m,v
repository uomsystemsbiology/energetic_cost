head	1.5;
access;
symbols;
locks; strict;
comment	@// @;


1.5
date	2015.03.27.22.48.40;	author peterg;	state Exp;
branches;
next	1.4;

1.4
date	2015.03.27.22.23.25;	author peterg;	state Exp;
branches;
next	1.3;

1.3
date	2015.03.15.22.54.31;	author peterg;	state Exp;
branches;
next	1.2;

1.2
date	2015.02.27.00.49.01;	author peterg;	state Exp;
branches;
next	1.1;

1.1
date	2015.02.27.00.15.32;	author peterg;	state Exp;
branches;
next	;


desc
@@


1.5
log
@New ThermoConst fun.
@
text
@function val = ghk_fun (FV,V_0)

  ## usage:  val = ghk_fun (V,V_0)
  ##
  ## V membrane voltage
  ## V_0: if V_0 == 0 then use GHK equation
  ##      if V_0 != 0 then use HH equation

  if nargin<2
    V_0 = 0;
  endif

  ## Get some constants
  const = ThermoConstants;
  F = const.F;
  V_N = const.V_N;

  ##Convert FV to volts
  V = FV/F;
  V_bar = V/V_N;		# Normalised voltage
  V_tilde = V_bar-V_0/V_N;	# Differential voltage (V_0=0 for GHK)

  ## GHK computation (avoiding 0/0)
  tol = 1e-6;
  den = exp(V_tilde)-1;
  if abs(den)<tol
    val = 1;
  else
    val = V_tilde./den;
  endif
   
endfunction
@


1.4
log
@Use RTF to generate both F and V_N
@
text
@d13 5
a18 1
  [V_N R F] = RTF(300);	# Unscaled
a19 1
  
a20 1

@


1.3
log
@Tidy
@
text
@d13 2
a14 2
  ##Convert FV to m volts
  F = 96.4853399;			# Faraday constant (J/mV)/M
d16 1
a16 2

  V_N = 25.852;			# Nernst voltage mV
@


1.2
log
@WORKING VERSION with chemo-electric flows.
@
text
@d13 2
a14 2
  ##Convert FV to volts
  F = 96.4853399;			# Faraday constant m C mol^-1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
function val = ghk_fun (V,V_0)
d12 5
a16 1
  
@
