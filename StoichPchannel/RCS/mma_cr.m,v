head	1.7;
access;
symbols;
locks; strict;
comment	@// @;


1.7
date	2015.03.28.00.18.28;	author peterg;	state Exp;
branches;
next	1.6;

1.6
date	2015.03.27.23.11.15;	author peterg;	state Exp;
branches;
next	1.5;

1.5
date	2015.03.12.02.36.41;	author peterg;	state Exp;
branches;
next	1.4;

1.4
date	2015.02.27.00.49.01;	author peterg;	state Exp;
branches;
next	1.3;

1.3
date	2015.02.26.22.27.20;	author peterg;	state Exp;
branches;
next	1.2;

1.2
date	2015.02.10.22.48.48;	author peterg;	state Exp;
branches;
next	1.1;

1.1
date	2015.02.10.22.38.25;	author peterg;	state Exp;
branches;
next	;


desc
@@


1.7
log
@sec not msec
@
text
@function kappa = mma_cr (i_cr,FV)
	 
  ## usage: kappa = mma_cr (i_cr,V)
  ## Gating function for voltage modulated gates
  ## Uses Keener Sneyd formulation

## Get some constants
const = ThermoConstants;
F = const.F;
V_N = const.V_N;

##Convert FV to volts
V = FV/F;

  
  one = ones(size(V));

  V_eq = -65; 			# mV (KeeSne 5.1  p 206)
  v = V*1000 - V_eq;		# They use voltage relative to V_eq in
				# mV
  
  if (i_cr==1)		# n HH gate

    ## Hodgkin-Huxley
    HH.alpha = 0.01*(-v+10)./(exp( (-v+10)/10 ) - 1);
    HH.beta  = 0.125*exp(-v/80);

    ## Physical parameters (see CompareModels.m)
    ## V_g =  25.8519960916881;
    ## k_c =  0.0500000000000000;
    ## k_o =  0.00869005086328556;

    V_g = V_N;
    k_c =  5.7537;
    k_o =  1;

  elseif (i_cr==2)	# m HH gate

    ## Hodgkin-Huxley
    HH.alpha = 0.1*(-v+25)./(exp( (-v+25)/10 ) - 1);
    HH.beta  = 4*exp(-v/18);
    
    ## Physical parameters
    ## V_g = 9;
    ## k_c = 0.2;
    ## k_o =  0.00261286753285733;
    ## V_g =  8.61733203056271;
    ## k_c =  0.200000000000000;
    ## k_o =  0.00189597393241766;
    V_g = V_N/3;
    k_c =  105.49;
    k_o =  1;
  elseif (i_cr==3)	# h HH gate
	 
    ## Hodgkin-Huxley
    HH.beta = 0.07*exp(-v/20);
    HH.alpha  = 1./(exp((30-v)/10) + 1);

    ## Physical parameters
    ## V_g = 7;
    ## k_c = 0.05;
    ## k_o =    6.84412974503901e-06;
    ## V_g =  6.46299902292203;
    ## k_c =  0.0500000000000000;
    ## k_o =    3.16405718378869e-06;
    V_g = V_N/4;
    k_c =  1;
    k_o =    6.3281e-05;

  else
    error(sprintf("Gate function i_cr %i does not exist",i_cr));
  endif

  ## HH stuff in msec - change to sec.
  HH.alpha = HH.alpha*1e3;
  HH.beta = HH.beta*1e3;

  ## HH time constant.
  HH.tau = 1./(HH.alpha + HH.beta);
  
  ## Physical
  Ph.alpha = k_c*exp(V/V_g);
  Ph.beta = k_o*one;

  ## Physical time-constant
  Ph.tau = 1./(Ph.alpha + Ph.beta);

  ## Choose kappa to make tau same as HH case.
  kappa = Ph.tau./HH.tau;

endfunction
@


1.6
log
@Use ThermoConstants.m
@
text
@d74 4
@


1.5
log
@WORKING VERSION
@
text
@d7 4
a10 1
  V_N = RTF*1000;		# mV
d12 2
a13 3
  ##Convert FV to volts
  F = 96.4853399;			# Faraday constant m C mol^-1
  V = FV/F;
d19 2
a20 1
  v = V - V_eq;			# They use voltage relative to V_eq
d36 1
@


1.4
log
@WORKING VERSION with chemo-electric flows.
@
text
@d7 2
d13 1
a18 5
  ## v_0 = 0; 			# Compare at this voltage

  ## vv_0 = sign(v_0)*min(abs(v-v_0))
  ## i_0 = find(v==vv_0)

d26 7
a32 7
    ## V_g = 20;
    ## k_c = 0.05;
    ## k_o =  0.00416406354563389;
    V_g =  25.8519960916881;
    k_c =  0.0500000000000000;
    k_o =  0.00869005086328556;

d43 6
a48 3
    V_g =  8.61733203056271;
    k_c =  0.200000000000000;
    k_o =  0.00189597393241766;
d59 7
a65 3
    V_g =  6.46299902292203;
    k_c =  0.0500000000000000;
    k_o =    3.16405718378869e-06;
a75 5

  ## ## Rescale
  ## k_o = (HH.beta(i_0)/HH.alpha(i_0))/(Ph.beta(i_0)/Ph.alpha(i_0))
  ## K_eq = k_c/k_o
  ## Ph.beta =  k_o*Ph.beta;
@


1.3
log
@New parameters from compare models.
@
text
@d1 1
a1 1
function kappa = mma_cr (i_cr,V)
d6 4
@


1.2
log
@Don't compute k_o here.
@
text
@d24 6
a29 3
    V_g = 20;
    k_c = 0.05;
    k_o =  0.00416406354563389;
d38 6
a43 3
    V_g = 9;
    k_c = 0.2;
    k_o =  0.00261286753285733;
d51 6
a56 4
    V_g = 7;
    k_c = 0.05;
    k_o =    6.84412974503901e-06;

@


1.1
log
@Initial revision
@
text
@d12 1
a12 1
  v_0 = 0; 			# Compare at this voltage
d14 2
a15 2
  vv_0 = sign(v_0)*min(abs(v-v_0))
  i_0 = find(v==vv_0)
d23 1
a23 1
    ## Physical parameters
d26 1
d37 1
a37 1

d47 1
d58 1
a58 1
  Ph.beta = one;
d60 4
a63 4
  ## Rescale
  k_o = (HH.beta(i_0)/HH.alpha(i_0))/(Ph.beta(i_0)/Ph.alpha(i_0))
  K_eq = k_c/k_o
  Ph.beta =  k_o*Ph.beta;
@
