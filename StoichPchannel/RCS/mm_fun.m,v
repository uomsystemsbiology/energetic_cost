head	1.4;
access;
symbols;
locks; strict;
comment	@// @;


1.4
date	2015.03.27.22.48.21;	author peterg;	state Exp;
branches;
next	1.3;

1.3
date	2015.03.27.22.33.36;	author peterg;	state Exp;
branches;
next	1.2;

1.2
date	2015.03.13.04.11.48;	author peterg;	state Exp;
branches;
next	1.1;

1.1
date	2015.03.13.04.06.35;	author peterg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@New ThermoConst function.
@
text
@function val = mm_fun (FV,V_0,k)

  ## usage:  val = mm_fun (V,V_0,k)
  ##
  ## V membrane voltage
  ## V_0: if V_0 == 0 then use MM equation
  ##      if V_0 != 0 then use HH equation

  if nargin<2
    V_0 = 0;
  endif

  if nargin<3
    k = 1
  endif


  ## Get some constants
  const = ThermoConstants;
  F = const.F;
  V_N = const.V_N;

  ##Convert FV to volts
  V = FV/F;
  V_bar = V/V_N;		# Normalised voltage
  V_tilde = V_bar-V_0/V_N;	# Differential voltage (V_0=0 for MM)

  ## MM computation 
  val = 1./(exp(V_tilde) + k);

endfunction
@


1.3
log
@Use RTF
@
text
@d17 5
a21 1
  [V_N R F] = RTF(300);	# Unscaled
@


1.2
log
@Input now FV
@
text
@d17 2
a19 1
  F = 96.4853399;			# Faraday constant m C mol^-1
a20 2
  
  V_N = 25.852;			# Nernst voltage mV
a21 1

@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
function val = mm_fun (V,V_0,k)
d16 4
@
