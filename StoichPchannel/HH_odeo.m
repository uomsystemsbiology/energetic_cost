
function [mtty] = HH_odeo(mttx,mttu,mttt,mttpar);
## [mtty] = HH_odeo(mttx,mttu,mttt,mttpar);
## System HH, representation odeo, language m; 
## File HH_odeo.m; 
## Generated by MTT on Thu Mar 12 14:43:22 AEDT 2015; 

## Horrible fudge to make mtt_m2p work
global ...
mtt_no_globals ;

## Parameters 
   c_m 	= mttpar(1);
   f 	= mttpar(2);
   i_app 	= mttpar(3);
   k_c 	= mttpar(4);
   k_ch 	= mttpar(5);
   k_cm 	= mttpar(6);
   k_o 	= mttpar(7);
   k_oh 	= mttpar(8);
   k_om 	= mttpar(9);
   k_k 	= mttpar(10);
   k_n 	= mttpar(11);
   rt 	= mttpar(12);
   v 	= mttpar(13);
   v_eq 	= mttpar(14);
   g_l 	= mttpar(15);
   kappa_k 	= mttpar(16);
   kappa_n 	= mttpar(17);
   v_k 	= mttpar(18);
   v_l 	= mttpar(19);
   v_n 	= mttpar(20);
   z 	= mttpar(21);

## States 
mttx1 = mttx(1) ;
mttx2 = mttx(2) ;
mttx3 = mttx(3) ;
mttx4 = mttx(4) ;
mttx5 = mttx(5) ;
mttx6 = mttx(6) ;
mttx7 = mttx(7) ;
mttx8 = mttx(8) ;
mttx9 = mttx(9) ;
mttx10 = mttx(10) ;
mttx11 = mttx(11) ;

## Inputs 
mttu1 = mttu(1);
mttu2 = mttu(2);
mttu3 = mttu(3);
mttu4 = mttu(4);
mttu5 = mttu(5);
mttu6 = mttu(6);
mttu7 = mttu(7);

## Unknown Inputs 

   mtty = zeros(7,1);

## BEGIN Code

## Code
  mtty(1) = mma_cr(1,(f**2*mttx1)/c_m)*(e**((f**2*mttx1)/(c_m*rt))*k_c*mttx2 -  \
k_o*mttx3);
  mtty(2) = ghk_fun((f**2*mttx1)/c_m,v_k)*k_k*k_o**4*kappa_k*mttx3**4*(e**((f** \
2*mttx1*z)/(c_m*rt))*mttx4 - mttx5);
  mtty(3) = mma_cr(2,(f**2*mttx1)/c_m)*(e**((3*f**2*mttx1)/(c_m*rt))*k_cm*mttx6 \
 - k_om*mttx7);
  mtty(4) = mma_cr(3,(f**2*mttx1)/c_m)*(e**((4*f**2*mttx1)/(c_m*rt))*k_ch*mttx8 \
 - k_oh*mttx9);
  mtty(5) = ghk_fun((f**2*mttx1)/c_m,v_n)*k_ch*k_n*k_om**3*kappa_n*mttx7**3* \
  mttx8*(e**((f**2*mttx1*z)/(c_m*rt))*mttx10 - mttx11);
  mtty(6) = (g_l*( - c_m*v_l + f*mttx1))/(c_m*f);
  mtty(7) = i_app;
## END Code
endfunction
